An application gets a list of games with its popularity points from an external service and generates the following statistics: top 100 free/paid/grossing iOS games. These statistics are saved so than clients can consume it by hitting application's API.
1. Statistics are generated by a scheduled task that runs hourly and saves data in Redis.
    1. Here you can request iOS statistics - https://rss.itunes.apple.com/en-us
        1. URL to get top 100 free iOS games - GET https://rss.itunes.apple.com/api/v1/us/ios-apps/top-free/games/100/explicit.json
        2. URL to get top 100 paid iOS games - GET https://rss.itunes.apple.com/api/v1/us/ios-apps/top-paid/games/100/explicit.json
        3. URL to get top 100 grossing iOS games - GET https://rss.itunes.apple.com/api/v1/us/ios-apps/top-grossing/all/100/explicit.json
2. An application allows to retrieve saved statistic for top 100 games in Ukraine (don't forget to select UA in requests above)
3. Application should have an endpoints to get saved statistic:
    1. /ios/games/charts/free  - returns top 100 free games
    2. /ios/games/charts/paid  - returns top 100 paid games
    3. /ios/games/charts/grossing  - returns top 100 grossing games
    4. All endpoints should accept "limit" param allowing to reduce the size of the response
        1. Example - /ios/games/charts/paid?limit=25 - returns top 25 paid games
    5. Response should include an ordered array with names of top games and their URLs:
        1. [ { name, url, releaseDate, artistName }]
4. Preferred tech stack - Java/Kotlin + Spring Boot (MVC or WebFlux) + Redis
